services:
  redis:
    image: redis:7.2.4
    restart: on-failure
    networks:
      - default
      - shared
  sai:
    image: node:22-alpine
    restart: on-failure
    networks:
      - default
      - shared
    expose:
      - 4000
    ports:
      - 9229:9229 # node debugger
    working_dir: /sai/packages/service
    command: ["node", "--inspect", "dist/componentsMain.js"]
    dns:
      - 172.100.61.253
    volumes:
      - ./:/sai
      - ${CAROOT}:/mkcert
    environment:
      - NODE_ENV=development
      - BASE_URL=https://sai.docker
      - CLIENT_NAME=Solid Authorization Service
      - PORT=4000
      - FRONTEND_URL=http://ui.sai.docker/
      - FRONTEND_AUTHORIZATION_URL=http://ui.sai.docker/authorize
      - VAPID_PUBLIC_KEY=BNUaG9vwp-WE_cX-3dNLebyczW_RivE8wHECIvZIUMUZ3co6P79neE3hueJJtFcg5ezTZ25T1ITciujz-mlAcnY
      - VAPID_PRIVATE_KEY=8d8mM59L2VptBg5hX_2dHnQ7T5VpeUsftbaQ6PfuhGA
      - PUSH_NOTIFICATION_EMAIL=mailto:example@yourdomain.org
      - NODE_EXTRA_CA_CERTS=/mkcert/rootCA.pem
    labels:
      - traefik.enable=true
      - traefik.http.routers.sai.rule=Host(`sai.docker`)
      - traefik.http.routers.sai.entrypoints=websecure
      - traefik.http.routers.sai.tls=true
      - traefik.http.services.sai.loadbalancer.server.port=4000
      - traefik.http.middlewares.testheader.headers.customrequestheaders.X-Forwarded-Proto=https
  # css:
  #   image: node:22-alpine
  #   restart: on-failure
  #   networks:
  #     - default
  #     - shared
  #   dns:
  #     - 172.100.61.253
  #   expose:
  #     - 3000
  #   working_dir: /sai/packages/css-storage-fixture
  #   command: ["npm", "run", "start"]
  #   volumes:
  #     - ./:/sai
  #     - ${CAROOT}:/mkcert
  #   environment:
  #     - CSS_CONFIG=/sai/packages/css-storage-fixture/config.json
  #     - CSS_LOGGING_LEVEL=info
  #     - CSS_ROOT_FILE_PATH=/sai/packages/css-storage-fixture
  #     - CSS_BASE_URL=https://pod.docker
  #     - NODE_EXTRA_CA_CERTS=/mkcert/rootCA.pem
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.pod.rule=Host(`pod.docker`) || HostRegexp(`^.+\.pod\.docker$`)
  #     - traefik.http.routers.pod.entrypoints=websecure
  #     - traefik.http.routers.pod.tls=true
  #     - traefik.http.services.pod.loadbalancer.server.port=3000
  #     - traefik.http.middlewares.testheader.headers.customrequestheaders.X-Forwarded-Proto=https
  ui:
    image: node:22-alpine
    restart: on-failure
    networks:
      - default
      - shared
    expose:
      - 4200
    working_dir: /sai/ui/authorization
    command: ["npm", "run", "dev"]
    volumes:
      - ./:/sai
    labels:
      - traefik.enable=true
      - traefik.http.routers.ui-sai.rule=Host(`ui.sai.docker`)
      - traefik.http.routers.ui-sai.entrypoints=websecure
      - traefik.http.routers.ui-sai.tls=true
      - traefik.http.services.ui-sai.loadbalancer.server.port=4200
  vuejectron:
    image: node:22-alpine
    restart: on-failure
    networks:
      - default
      - shared
    expose:
      - 4500
    working_dir: /sai/examples/vuejectron
    command: ["npm", "run", "dev"]
    volumes:
      - ./:/sai
    labels:
      - traefik.enable=true
      - traefik.http.routers.vuejectron.rule=Host(`vuejectron.docker`)
      - traefik.http.routers.vuejectron.entrypoints=websecure
      - traefik.http.routers.vuejectron.tls=true
      - traefik.http.services.vuejectron.loadbalancer.server.port=4500

networks:
  shared:
    external: true
    name: network.ss
  default:
    name: network.sai
